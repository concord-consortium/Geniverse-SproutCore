<% # SPROUTCORE DEFAULT INDEX TEMPLATE
   # This template provide provides a basic wrapper for a SproutCore client.
   # Most of the time, it will be sufficient for your own needs.  However, if
   # you need to create your own template, you can do so by copying this file
   # into your client, naming it 'index.rhtml' and then adding the options
   # :layout => 'lib/index' to your Buildfile.
   #
   # See the comments in this file for more information on what you can
   # change.
-%>
<!DOCTYPE html>
<html<% unless @content_for_html5_manifest.blank? %> manifest="app.manifest"<% end %>>
  <head>

    <!--  Modified for Geniverse. -->

    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=8" />
    <meta http-equiv="Content-Script-Type" content="text/javascript" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="<%= config.status_bar_style || 'default' %>" />
    <meta id="viewport-meta" name="viewport" content="initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <script type="text/javascript">
      function updateMetaViewport(){
        var mvp = document.getElementById('viewport-meta');
        var mvpScale = 1.0, mvpWidthScale = 1.0, mvpHeightScale = 1.0;
        if (innerWidth < 1100){
          mvpWidthScale = innerWidth/1100;
        }
        if (innerHeight < 800){
          mvpHeightScale = innerHeight/800;
        }
        mvpScale = Math.min(mvpWidthScale, mvpHeightScale);
        mvpWidth = innerWidth/mvpScale;

        // using target-densitydpi=X is being removed from webkit,
        // but the *-scale options are not supported by Dolphin or the webkit used by PhoneGap
        // Chrome 18 on Android supports both options, Chrome >21 does not support target-densitydpi
        // So for all Android browsers except chrome we'll use the target-densitydpi for now
        // we might be able to improve this by using the webkit version on Android instead of !Chrome
        if ( /Android/.exec(navigator.userAgent) && !/Chrome/.exec(navigator.userAgent)) {
          // by default it is 160dpi
          mvp.setAttribute('content', "target-densitydpi=" + 160/mvpScale +
                                      ", initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no");

        } else {
          mvp.setAttribute('content', "initial-scale=" + mvpScale +
                                      ", minimum-scale=" + mvpScale +
                                      ", maximum-scale=" + mvpScale +
                                      ", user-scalable=no");
        }
      }
      updateMetaViewport();
    </script>

    <link rel="apple-touch-icon<%= '-precomposed' if config.precomposed_icon %>" href="<%= sc_static(config.icon || 'sproutcore-logo.png') %>" />
    <link rel="apple-touch-startup-image" media="screen and (orientation:portrait)" href="<%= sc_static(config.startup_image_portrait || 'sproutcore-startup-portrait.png') %>" />
    <link rel="apple-touch-startup-image" media="screen and (orientation:landscape)" href="<%= sc_static(config.startup_image_landscape || 'sproutcore-startup-landscape.png') %>" />
    <link rel="shortcut icon" href="<%= sc_static(config.favicon || 'favicon.ico') %>" type="image/x-icon" />
    <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Sofadi+One" />

<% # Set the 'title' in your config to alter this setting %>
    <title><%= title %></title>
<% #
   # You may choose to load one or more bootstrap resources.  These are
   # JS targets that you would like to load at the top of the page.  Specify
   # these in your Buildfile with the 'bootstrap' config.
-%>
  <%= bootstrap %>

<% #
   # This line should appear in your head area to include the stylesheets
   # generated by your client.  If you need to include your own
   # stylesheets, you don't need to change it here.  Instead use the
   # required option in your config.
-%>
   <%= stylesheets_for_client %>
   <%= @content_for_page_styles %>

  </head>

<% # The theme CSS class is added automatically based on your chosen theme.
   # If you need to specify a custom theme name, use CONFIG.theme_name
-%>
  <body class="<%= [theme_name(:default => 'sc-theme'), 'focus'].compact.join(' ') %>">


<% # modified for Geniverse. It would be nice to load the section below as a partial
   # but I'm not sure how to get sc-server to load partials from an .rhtml file (such as
   # 'resources/loading.rhtml') in testing mode - RPK 8/30/10
-%>

<div id="sendButtonContainer" style="visibility: hidden;">button</div>

<script type="text/javascript" src="/resources/js/jquery-1.4.4.min.js"></script>
<script type="text/javascript" src="/resources/js/jquery-ui-1.8.4.custom.min.js"></script>
<script type="text/javascript" src="/resources/js/raphael-min.js"></script>
<script type="text/javascript" src="/resources/js/burst-core.js"></script>

<script type="text/javascript">
  window.CC_RESOURCES_BASE = "<%= config.resources_base %>";
</script>

<% if config.google_analytics_id %>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', '<%= config.google_analytics_id %>']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<% end %>
<%
  # <script type="text/javascript" src="http://code.bocoup.com/concord/geniverse-full/js/geniverse.js"></script>
  # <link type="text/css" href="http://code.bocoup.com/concord/geniverse-full/css/geniverse.css" rel="stylesheet" />
  # <link type="text/css" href="http://code.bocoup.com/concord/geniverse-full/css/ui-lightness/jquery-ui-1.8.4.custom.css " rel="stylesheet" />
-%>

<% # end Geniverse modification
-%>


<% # This section is used to setup additional optional class names on the
   # body content based on JS-selected conditions.  Use this to make sure you
   # show the proper CSS as soon as the page appears.
-%>
<%= inline_javascript('sproutcore/bootstrap:setup_body_class_names') %>

<% #
   # This is where you root body element will appear.  To cause your
   # content to appear here, just declare content_for('body') in one of
   # your partials.
-%>

<%= @content_for_body %>

<% #
   # This is where your loading screen will appear.  To add a loading screen
   # just declare content_for('loading') in one of your partials. If you use
   # sc-gen to generate your app, it will create a file called loading.rhtml
   # under english.lproj. You can insert the desired content there.
-%>
<% unless @content_for_loading.blank? %>
<div id="loading">
<%= @content_for_loading %>
</div>
<% end -%>
<% #
   # This is where the resources you declare will appear.  By default anything
   # you add to partials will be added to this section unless you specify
   # otherwise.  Note that resources are initially hidden so you can pull them
   # apart as needed on page load.
-%>
<% unless @content_for_resources.blank? %>
    <!-- Resources to be removed from DOM on page load -->
    <div id="resources" style="display:none; visibility: hidden;">
      <%= @content_for_resources -%>
    </div>
<% end -%>
<% #
   # This line should appear at the bottom of your page to include your
   # generated JavaScript and any libraries you reference.  If you need
   # to include other javascripts, add them to the :requires option of
   # your client in routes.rb instead of changing it here.
-%>
<%= javascripts_for_client %>
<% unless @content_for_page_javascript.blank? %>
<%= @content_for_page_javascript %>
<% end -%>
<% #
   # If you use old-style view helpers in your page, this method must be
   # called to actually add the page views to your HTML.  Normally this will
   # not generate any content.
-%>
<% #render_page_views -%>
<% # Older SproutCore applications need SC.didLoad to be called after onload.
   # This is no longer required by SproutCore so it is off by default.  To
   # reenable set use_window_onload = true in yur config.
-%>
<% if config.use_window_onload %>
<!-- Start SproutCore on Page Load -->
    <script type="text/javascript">window.onload = SC.didLoad;</script>
<% end -%>
<% #
   # The final content section can be used to add any last minute setup you
   # need to do before the page ends.  This is required for loading unit
   # tests among other things.
-%>
<%= @content_for_final -%>
<%
  #disable main if the application is loaded in design mode
%>
<%= @content_for_designer -%>

</html>
